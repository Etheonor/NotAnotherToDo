/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/': {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  '/admin_list': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.admin_list.id'];
          isadmin?: parameters['rowFilter.admin_list.isadmin'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['admin_list'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** admin_list */
          admin_list?: definitions['admin_list'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.admin_list.id'];
          isadmin?: parameters['rowFilter.admin_list.isadmin'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.admin_list.id'];
          isadmin?: parameters['rowFilter.admin_list.isadmin'];
        };
        body: {
          /** admin_list */
          admin_list?: definitions['admin_list'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/profiles': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.profiles.id'];
          updated_at?: parameters['rowFilter.profiles.updated_at'];
          username?: parameters['rowFilter.profiles.username'];
          github_profile?: parameters['rowFilter.profiles.github_profile'];
          projects?: parameters['rowFilter.profiles.projects'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['profiles'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profiles */
          profiles?: definitions['profiles'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.profiles.id'];
          updated_at?: parameters['rowFilter.profiles.updated_at'];
          username?: parameters['rowFilter.profiles.username'];
          github_profile?: parameters['rowFilter.profiles.github_profile'];
          projects?: parameters['rowFilter.profiles.projects'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.profiles.id'];
          updated_at?: parameters['rowFilter.profiles.updated_at'];
          username?: parameters['rowFilter.profiles.username'];
          github_profile?: parameters['rowFilter.profiles.github_profile'];
          projects?: parameters['rowFilter.profiles.projects'];
        };
        body: {
          /** profiles */
          profiles?: definitions['profiles'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/projects': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.projects.id'];
          name?: parameters['rowFilter.projects.name'];
          description?: parameters['rowFilter.projects.description'];
          created_at?: parameters['rowFilter.projects.created_at'];
          updated_at?: parameters['rowFilter.projects.updated_at'];
          backlog?: parameters['rowFilter.projects.backlog'];
          users?: parameters['rowFilter.projects.users'];
          tags?: parameters['rowFilter.projects.tags'];
          tutorials?: parameters['rowFilter.projects.tutorials'];
          creator?: parameters['rowFilter.projects.creator'];
          slug?: parameters['rowFilter.projects.slug'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['projects'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** projects */
          projects?: definitions['projects'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.projects.id'];
          name?: parameters['rowFilter.projects.name'];
          description?: parameters['rowFilter.projects.description'];
          created_at?: parameters['rowFilter.projects.created_at'];
          updated_at?: parameters['rowFilter.projects.updated_at'];
          backlog?: parameters['rowFilter.projects.backlog'];
          users?: parameters['rowFilter.projects.users'];
          tags?: parameters['rowFilter.projects.tags'];
          tutorials?: parameters['rowFilter.projects.tutorials'];
          creator?: parameters['rowFilter.projects.creator'];
          slug?: parameters['rowFilter.projects.slug'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.projects.id'];
          name?: parameters['rowFilter.projects.name'];
          description?: parameters['rowFilter.projects.description'];
          created_at?: parameters['rowFilter.projects.created_at'];
          updated_at?: parameters['rowFilter.projects.updated_at'];
          backlog?: parameters['rowFilter.projects.backlog'];
          users?: parameters['rowFilter.projects.users'];
          tags?: parameters['rowFilter.projects.tags'];
          tutorials?: parameters['rowFilter.projects.tutorials'];
          creator?: parameters['rowFilter.projects.creator'];
          slug?: parameters['rowFilter.projects.slug'];
        };
        body: {
          /** projects */
          projects?: definitions['projects'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/rpc/handle_new_user': {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferParams'];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  admin_list: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: boolean */
    isadmin?: boolean;
  };
  profiles: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    username?: string;
    /** Format: json */
    github_profile?: string;
    /** Format: ARRAY */
    projects?: unknown[];
  };
  projects: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: text */
    name: string;
    /** Format: text */
    description?: string;
    /** Format: timestamp with time zone */
    created_at?: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: json */
    backlog?: { id: string; name: string }[];
    /** Format: json */
    users?: string;
    /** Format: json */
    tags?: string;
    /** Format: json */
    tutorials?: string;
    /** Format: uuid */
    creator?: string;
    /** Format: text */
    slug?: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: 'params=single-object';
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: 'return=representation' | 'return=minimal' | 'return=none';
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: 'count=none';
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description admin_list */
  'body.admin_list': definitions['admin_list'];
  /** Format: uuid */
  'rowFilter.admin_list.id': string;
  /** Format: boolean */
  'rowFilter.admin_list.isadmin': string;
  /** @description profiles */
  'body.profiles': definitions['profiles'];
  /** Format: uuid */
  'rowFilter.profiles.id': string;
  /** Format: timestamp with time zone */
  'rowFilter.profiles.updated_at': string;
  /** Format: text */
  'rowFilter.profiles.username': string;
  /** Format: json */
  'rowFilter.profiles.github_profile': string;
  /** Format: ARRAY */
  'rowFilter.profiles.projects': string;
  /** @description projects */
  'body.projects': definitions['projects'];
  /** Format: uuid */
  'rowFilter.projects.id': string;
  /** Format: text */
  'rowFilter.projects.name': string;
  /** Format: text */
  'rowFilter.projects.description': string;
  /** Format: timestamp with time zone */
  'rowFilter.projects.created_at': string;
  /** Format: timestamp with time zone */
  'rowFilter.projects.updated_at': string;
  /** Format: json */
  'rowFilter.projects.backlog': string;
  /** Format: json */
  'rowFilter.projects.users': string;
  /** Format: json */
  'rowFilter.projects.tags': string;
  /** Format: json */
  'rowFilter.projects.tutorials': string;
  /** Format: uuid */
  'rowFilter.projects.creator': string;
  /** Format: text */
  'rowFilter.projects.slug': string;
}

export interface operations {}

export interface external {}
